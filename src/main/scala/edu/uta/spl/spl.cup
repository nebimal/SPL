/********************************************************************************
*
* File: spl.cup
* The SPL parser 
*
********************************************************************************/

package edu.uta.spl;

import scala.collection.immutable.*;
import scala.Tuple2;
import java_cup.runtime.*;

parser code {:
    static int[] tokens = {
      sym.error, sym.ID, sym.STRING_LITERAL, sym.INTEGER_LITERAL, sym.FLOAT_LITERAL,
      sym.AND, sym.ARRAY, sym.BOOLEAN, sym.BY, sym.DEF, sym.DIV, sym.ELSE, sym.EQUAL, sym.EXIT, sym.FALSE,
      sym.FLOAT, sym.FOR, sym.IF, sym.INT, sym.LOOP, sym.MOD,
      sym.NOT, sym.OR, sym.PRINT, sym.READ, sym.RETURN, sym.STRING, sym.TO, sym.TYPE, sym.VAR, sym.WHILE,
      sym.PLUS, sym.MINUS, sym.TIMES, sym.TRUE,
      sym.LT, sym.LEQ, sym.GT, sym.GEQ, sym.EQ, sym.NEQ, sym.COLON, sym.SEMI,
      sym.COMMA, sym.SHARP, sym.DOT, sym.LP, sym.RP, sym.LB, sym.RB, sym.LSB, sym.RSB
    };

    static String[] token_names = {
      "error", "ID", "STRING_LITERAL", "INTEGER_LITERAL", "FLOAT_LITERAL",
      "AND &&", "ARRAY", "BOOLEAN", "BY", "DEF", "DIV /", "ELSE", "EQUAL", "EXIT", "FALSE",
      "FLOAT", "FOR", "IF", "INT", "LOOP", "MOD %",
      "NOT", "OR ||", "PRINT", "READ", "RETURN", "STRING", "TO", "TYPE", "VAR", "WHILE",
      "PLUS +", "MINUS -", "TIMES *", "TRUE",
      "LT <", "LEQ <=", "GT >", "GEQ >=", "EQ ==", "NEQ <>", "COLON :", "SEMI ;",
      "COMMA ,", "SHARP #", "DOT .", "LP (", "RP )", "LB {", "RB }", "LSB [", "RSB ]"
    };

    public static String print ( Symbol s ) {
        for ( int i = 0; i < tokens.length; i++ ) {
            if (tokens[i] == s.sym) {
                String res = token_names[i] + " ";
                if (s.value == null)
                    return res;
                else if (s.value instanceof Integer)
                    return res + ((Integer) s.value).intValue();
                else if (s.value instanceof Float)
                    return res + ((Float) s.value).floatValue();
                else if (s.value instanceof String)
                    return res + "\"" + (String) s.value + "\"";
            }
        };
        return "?";
    }

    public void syntax_error ( Symbol token ) {
        System.err.println("*** Syntax Error: " + print(token) +
                           " (line: " + token.left + ", column: " + token.right + ")");
        System.exit(1);
    }

    /** nil is the empty list */
    final static List nil = Nil$.MODULE$;

    /** Append list2 at the end of list1 (i.e. return a new list containing
        the elements from list1 followed by the elements from list2) */
    static<T> List<T> append ( List<T> list1, List<T> list2 ) {
        return list1.$colon$colon$colon(list2);
    }

    /** Append the element elem at the end of the list */
    static<T> List<T> append ( List<T> list, T elem ) {
        return nil.$colon$colon(elem).$colon$colon$colon(list);
    }

    /** Insert the element elem at the beginning of the list */
    static<T> List<T> add ( T elem, List<T> list ) {
        return list.$colon$colon(elem);
    }
:};

/* Terminals (tokens returned by the scanner). */
terminal String  ID, STRING_LITERAL;
terminal Integer INTEGER_LITERAL;
terminal Float   FLOAT_LITERAL;
terminal         AND, ARRAY, BOOLEAN, BY, DEF, DIV, ELSE, EQUAL, EXIT, FALSE,
                 FLOAT, FOR, IF, INT, LOOP, MOD,
                 NOT, OR, PRINT, READ, RETURN, STRING, TO, TYPE, VAR, WHILE,
                 PLUS, MINUS, TIMES, TRUE, LT, LEQ, GT, GEQ, EQ, NEQ, COLON, SEMI,
                 COMMA, SHARP, DOT, LP, RP, LB, RB, LSB, RSB, UMINUS;

non terminal Program                         program;
non terminal BlockSt                         block_content;
non terminal List<Definition>                defsl;
non terminal Definition                      defs;
non terminal Stmt                            stmt;
non terminal List<Stmt>                      stmts;
non terminal Expr                            expr;
non terminal List<Expr>                      expl;
non terminal List<Bind<Expr>>                expb;
non terminal Type                            type;
non terminal List<Type>                      typel;
non terminal List<Bind<Type>>                params;
non terminal Lvalue                          lvalue;
non terminal List<Lvalue>                    lvaluel;



precedence nonassoc     ELSE;
precedence left        OR;
precedence left        AND;
precedence nonassoc     NOT;
precedence left         EQ, LT, GT, LEQ, GEQ, NEQ;
precedence left         PLUS, MINUS;
precedence left         TIMES, DIV, MOD;
precedence left         LP, LB, LSB, COMMA;

start with program;

program         ::= block_content:b                                         {: SPL.setAST(new Program(b)); :}
                ;

block_content   ::= defsl:dl stmts:sl                                       {: RESULT = new BlockSt(dl,sl); :}
                |   stmts:sl                                                {: RESULT = new BlockSt(nil,sl); :}
                ;

defs            ::=  DEF ID:s LP params:p RP COLON type:t LB block_content:b RB     {: RESULT = new FuncDef(s, p, t, b); :}
                |    DEF ID:s LP params:p RP LB block_content:b RB                  {: RESULT = new FuncDef(s, p, new NoType(), b); :}
                |    VAR ID:s EQUAL expr:e                                          {: RESULT = new VarDef(s, new AnyType(), e); :}
                |    VAR ID:s COLON type:t EQUAL expr:e                             {: RESULT = new VarDef(s, t, e); :}
                |    TYPE ID:s EQUAL type:t                                         {: RESULT = new TypeDef(s, t); :}
                ;

defsl           ::= defs:d SEMI                                                     {: RESULT = add(d, nil); :}
                |   defsl:d1 defs:d2 SEMI                                           {: RESULT = append(d1, d2); :}
                ;

params          ::=   ID:s COLON type:t                                             {: RESULT = add(new Bind<Type>(s, t), nil); :}
                |     params:p COMMA ID:s COLON type:t                              {: RESULT = append(p, new Bind<Type>(s, t)); :}
                |                                                                   {: RESULT = nil; :}
                ;

expb            ::=   ID:s EQUAL expr:e                                       {: RESULT = add(new Bind<Expr>(s, e), nil); :}
                |     expb:p COMMA ID:s EQUAL expr:e                          {: RESULT = append(p, new Bind<Expr>(s, e)); :}
                |                                                             {: RESULT = nil; :}
                ;

type            ::= INT                                                       {: RESULT = new IntType(); :}
                |   FLOAT                                                     {: RESULT = new FloatType(); :}
                |   STRING                                                    {: RESULT = new StringType(); :}
                |   BOOLEAN                                                   {: RESULT = new BooleanType(); :}
                |   ID:s                                                      {: RESULT = new NamedType(s); :}
                |   ARRAY LSB type:t RSB                                      {: RESULT = new ArrayType(t); :}
                |   LB params:p RB                                            {: RESULT = new RecordType(p); :}
                |   LP typel:t RP                                             {: RESULT = new TupleType(t); :}
                ;

typel           ::= type:t                                      {: RESULT = add(t, nil); :}
                | typel:t1 COMMA type:t2                        {: RESULT = append(t1, t2); :}
                |
                ;


lvalue          ::= ID:s                                        {: RESULT = new Var(s); :}
                | lvalue:e1 LSB expr:e2 RSB                     {: RESULT = new ArrayDeref(new LvalExp(e1), e2); :}
                | lvalue:e DOT ID:s                             {: RESULT = new RecordDeref(new LvalExp(e), s); :}
                | lvalue:e SHARP INTEGER_LITERAL:n              {: RESULT = new TupleDeref(new LvalExp(e), ((Integer)n).intValue()); :}
                ;

lvaluel         ::= lvalue:e                                    {: RESULT = add(e, nil); :}
                | lvaluel:e1 COMMA lvalue:e2                    {: RESULT = append(e1, e2); :}
                ;

expr            ::= INTEGER_LITERAL:n                           {: RESULT = new IntConst(n); :}
                |   FLOAT_LITERAL:n                             {: RESULT = new FloatConst(n); :}
                |   STRING_LITERAL:s                            {: RESULT = new StringConst(s); :}
                |   TRUE                                        {: RESULT = new BooleanConst(true); :}
                |   FALSE                                       {: RESULT = new BooleanConst(false); :}
                |   lvalue:e                                    {: RESULT = new LvalExp(e); :}
                |   MINUS expr:e                                {: RESULT = new UnOpExp("minus", e); :}               
                |   NOT expr:e                                  {: RESULT = new UnOpExp("not", e); :}
                |   expr:e1 MOD expr:e2                         {: RESULT = new BinOpExp("mod", e1, e2); :}
                |   expr:e1 AND expr:e2                         {: RESULT = new BinOpExp("and", e1, e2); :}
                |   expr:e1 OR expr:e2                          {: RESULT = new BinOpExp("or", e1, e2); :}                  
                |   expr:e1 EQ expr:e2                          {: RESULT = new BinOpExp("eq", e1, e2); :}
                |   expr:e1 LT expr:e2                          {: RESULT = new BinOpExp("lt", e1, e2); :}
                |   expr:e1 GT expr:e2                          {: RESULT = new BinOpExp("gt", e1, e2); :}
                |   expr:e1 LEQ expr:e2                         {: RESULT = new BinOpExp("leq", e1, e2); :}
                |   expr:e1 GEQ expr:e2                         {: RESULT = new BinOpExp("geq", e1, e2); :}
                |   expr:e1 NEQ expr:e2                         {: RESULT = new BinOpExp("neq", e1, e2); :}
                |   expr:e1 PLUS expr:e2                        {: RESULT = new BinOpExp("plus", e1, e2); :}
                |   expr:e1 MINUS expr:e2                       {: RESULT = new BinOpExp("minus", e1, e2); :}
                |   expr:e1 TIMES expr:e2                       {: RESULT = new BinOpExp("times", e1, e2); :}
                |   expr:e1 DIV expr:e2                         {: RESULT = new BinOpExp("div", e1, e2); :}
                |   ARRAY LP expr:e1 COMMA expr:e2 RP           {: RESULT = new ArrayGen(e1, e2); :}                 
                |   ID:s LP expl:e RP                           {: RESULT = new CallExp(s, e); :}
                |   LB expb:e RB                                {: RESULT = new RecordExp(e); :}
                |   LSB expl:e RSB                              {: RESULT = new ArrayExp(e); :}
                |   LP expl:e RP                                {: RESULT = (e == nil) ? new NullExp() : new TupleExp(e); :}
                ;

expl            ::= expr:e                                      {: RESULT = add(e, nil); :}
                |   expl:e1 COMMA expr:e2                       {: RESULT = append(e1, e2); :}
                |                                               {: RESULT = nil; :}
                ;

stmt            ::= lvalue:l EQUAL expr:e                                       {: RESULT = new AssignSt(l, e); :}
                |   ID:s LP expl:e RP                                           {: RESULT = new CallSt(s, e); :}                    
                |   LB block_content:b RB                                       {: RESULT = b; :}
                |   READ LP lvaluel:s RP                                        {: RESULT = new ReadSt(s); :}
                |   PRINT LP expl:e RP                                          {: RESULT = new PrintSt(e); :}    
                |   IF LP expr:e RP stmt:s1 ELSE stmt:s2                        {: RESULT = new IfSt(e, s1, s2); :}            
                |   IF LP expr:e RP stmt:s                                      {: RESULT = new IfSt(e, s, null); :} 
                |   FOR LP ID:s1 EQUAL expr:e1 TO expr:e2 RP stmt:s2            {: RESULT = new ForSt(s1, e1, e2, new IntConst(1), s2); :}            
                |   FOR LP ID:s1 EQUAL expr:e1 TO expr:e2 BY expr:e3 RP stmt:s2 {: RESULT = new ForSt(s1, e1, e2, e3, s2); :}            
                |   WHILE LP expr:e RP stmt:s                                   {: RESULT = new WhileSt(e, s); :}
                |   LOOP stmt:s                                                 {: RESULT = new LoopSt(s); :}
                |   EXIT                                                        {: RESULT = new ExitSt(); :}
                |   RETURN expr:e                                               {: RESULT = new ReturnValueSt(e); :}
                |   RETURN                                                      {: RESULT = new ReturnSt(); :}
                ;

stmts           ::= stmt:s SEMI                                                 {: RESULT = append(nil,s); :}
                |   stmts:s1 stmt:s2 SEMI                                       {: RESULT = append(s1,s2); :}
                ;
